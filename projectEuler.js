
//========================================================================================================================

// Project Euler: Problem 3: Largest prime factor

// The prime factors of 13195 are 5, 7, 13 and 29.

// What is the largest prime factor of the number 600851475143 ?

function largestPrimeFactor (num) {
  let primeFactors = [];
  let primes = [2];

  // The algo is 
    // 1. we will divide num with last elem of [primes]
    // 2. keep dividing with that prime until it divides no more. add that prime to list of primeFactors
    // if num is still > 1, then we get the next prime (via function called addNextPrime), and repeat 1 & 2.
    // if num has been reduced to 1, we have found all the prime factors of num, we return the max of [primeFactors]

  while (num > 1) {
    let currentPrime = primes[primes.length - 1];  // last elem
    while (num % currentPrime === 0 && num > 1) {  // while this prime number divides num we keep dividing
      primeFactors.push(currentPrime);
      num = num / currentPrime;
    }
    primes = addNextPrime(primes);
  }

  return Math.max(...primeFactors);

  function addNextPrime (listOfPrimes) {
    let nextNum = listOfPrimes[listOfPrimes.length - 1] + 1;
    while (listOfPrimes.some(prime => nextNum % prime === 0)) {
      nextNum++;
    }
    return listOfPrimes.concat(nextNum); 
  }
}


// console.log(largestPrimeFactor(75));  // 5  
// console.log(largestPrimeFactor(13195))  // 29;
// console.log(largestPrimeFactor(600851475143))  // 6857;



/*

function *primeGenerator() {  
  // debugger;
  function addNextPrime (arrayOfPrimes) {
    // debugger; 	
    let nextNum = arrayOfPrimes[arrayOfPrimes.length - 1] + 1;  // 1 + last of array
    while (arrayOfPrimes.some(prime => nextNum % prime === 0)) {  // this condition means => while there is at least one prime for which it is true that nextNum is divisible by it, we keep moving to the next number, since the current one cannot be a prime. As soon as this test fails, we know that no prime in the current list managed to divide the new number, hence this new number must be a prime.
      nextNum++;
    }
    return arrayOfPrimes.concat(nextNum);
  }	
  let primes = [2];
  while(true) {
    yield primes[primes.length - 1];
    primes = addNextPrime(primes);
  }
}


*/ 

//=============================================================================================


/*

// Project Euler: Problem 2: Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

function fiboEvenSum(number) {
  // You can do it!
  function generateFibo(number) {
  	let start = [1, 2];
  	while (start.length <= number) {
  		start.push(start[start.length - 1] + start[start.length - 2])
  	}
  	return start;
  }

  return generateFibo(number).reduce((acc, x) => {
  	if (x % 2 === 0) {
  		acc += x;
  	}
  	return acc;
  }, 0);
}

console.log(fiboEvenSum(10));  // 188
console.log(fiboEvenSum(23));  // 60696
console.log(fiboEvenSum(43));  // 1485607536


*/

// 

//============================================================================================================================


/*


// Project Euler: Problem 1: Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below the provided parameter value number.

function multiplesOf3and5(number) {
	let result = 0;

	for(let i = 1; i < number; i++) {
		if(i % 3 === 0 || i % 5 === 0) {
			result += i;
		}
	}

	return result;
}

console.log(multiplesOf3and5(1000));  // 233168
console.log(multiplesOf3and5(10));   // 23;


*/

//